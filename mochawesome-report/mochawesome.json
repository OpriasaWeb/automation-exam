{
  "stats": {
    "suites": 15,
    "tests": 34,
    "passes": 34,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-25T01:03:49.469Z",
    "end": "2024-05-25T01:04:05.175Z",
    "duration": 15706,
    "testsRegistered": 34,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "68bc0ab3-2bb4-4256-b8e3-7e1272c494b3",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3f368e75-c643-4c10-a51b-6e431b5a96d7",
          "title": "Test add to cart functionality",
          "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabAddToCart.js",
          "file": "\\test\\swaglabs\\scripts\\testSwagLabAddToCart.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test add to cart functionality\"",
              "fullTitle": "Test add to cart functionality \"before all\" hook in \"Test add to cart functionality\"",
              "timedOut": null,
              "duration": 5752,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await new Builder().forBrowser(\"MicrosoftEdge\").build();\nawait driver.get(\"https://www.saucedemo.com/\");",
              "err": {},
              "uuid": "5962af95-5e32-49d2-a38a-b5f5721413b9",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Test add to cart functionality\"",
              "fullTitle": "Test add to cart functionality \"after all\" hook in \"Test add to cart functionality\"",
              "timedOut": null,
              "duration": 242,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "782a326b-b8b4-4c26-9f2b-a8dd34520e7d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c1e88e81-e6f7-4198-8415-0121ae1f8c43",
              "title": "Test login with correct credentials to redirect on inventory page",
              "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabAddToCart.js",
              "file": "\\test\\swaglabs\\scripts\\testSwagLabAddToCart.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Verify if user is able to login using correct username and password",
                  "fullTitle": "Test add to cart functionality Test login with correct credentials to redirect on inventory page Verify if user is able to login using correct username and password",
                  "timedOut": null,
                  "duration": 659,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n      await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n      await driver.findElement(By.id(\"login-button\")).click();\n      await driver.wait(until.urlIs(\"https://www.saucedemo.com/inventory.html\"), 10000); // Wait until redirected to inventory page\n      await verifyUrl(\"https://www.saucedemo.com/inventory.html\")",
                  "err": {},
                  "uuid": "a7fdf055-5049-46e8-b2c1-b5b490ff402b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7fdf055-5049-46e8-b2c1-b5b490ff402b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 659,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "a7dbfb19-481e-4929-bc9e-db20857685b5",
              "title": "Test cart badge increment and decrement",
              "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabAddToCart.js",
              "file": "\\test\\swaglabs\\scripts\\testSwagLabAddToCart.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Verify if the cart is incrementing to one after clicking the Add to cart button in each product",
                  "fullTitle": "Test add to cart functionality Test cart badge increment and decrement Verify if the cart is incrementing to one after clicking the Add to cart button in each product",
                  "timedOut": null,
                  "duration": 552,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Assertion if on the right page\n      await verifyUrl(\"https://www.saucedemo.com/inventory.html\") // Note, feel free to change to test assertion\n      await verifyTitle(\"Swag Labs\") // Note, feel free to change to test assertion\n      // Add to cart\n      let firstAddToCart = await driver.findElement(By.id(\"add-to-cart-sauce-labs-bolt-t-shirt\"))\n      await firstAddToCart.click()\n      let secondAddToCart = await driver.findElement(By.id(\"add-to-cart-test.allthethings()-t-shirt-(red)\")) \n      await secondAddToCart.click()\n      // Assert the cart badge current value\n      // Wait for the add to cart increment value\n      let totalOfAddedToCart = await driver.wait(until.elementLocated(By.xpath(\"//span[@data-test='shopping-cart-badge']\")), 5000)\n      await driver.wait(until.elementIsVisible(totalOfAddedToCart), 5000)\n      // Get the total, in this case this should be two (2)\n      let addedToCartText = await driver.findElement(By.xpath(\"//span[@data-test='shopping-cart-badge']\"))\n      assert.equal(await addedToCartText.getText(), 2, \"Cart badge should be 2\")",
                  "err": {},
                  "uuid": "c28e0131-97c7-4c86-b3d2-9037ab4578d9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if the cart is decrementing to one after clicking the Remove button in each product",
                  "fullTitle": "Test add to cart functionality Test cart badge increment and decrement Verify if the cart is decrementing to one after clicking the Remove button in each product",
                  "timedOut": null,
                  "duration": 566,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await verifyUrl(\"https://www.saucedemo.com/inventory.html\") // Note, feel free to change to test assertion\n      // Wait for the element to change\n      await driver.wait(until.elementLocated(By.id(\"remove-sauce-labs-bolt-t-shirt\")), 5000)\n      \n      // Remove to cart\n      let removeToCart = await driver.findElement(By.id(\"remove-sauce-labs-bolt-t-shirt\"))  //button[@id='add-to-cart-sauce-labs-bolt-t-shirt' and @name='add-to-cart-sauce-labs-bolt-t-shirt']\n      await removeToCart.click()\n      // Assert the cart badge current value\n      // Wait for the add to cart increment value\n      let totalOfAddedToCart = await driver.wait(until.elementLocated(By.xpath(\"//span[@data-test='shopping-cart-badge']\")), 5000)\n      await driver.wait(until.elementIsVisible(totalOfAddedToCart), 5000)\n      // Get the total, in this case this should be two (2)\n      let addedToCartText = await driver.findElement(By.xpath(\"//span[@data-test='shopping-cart-badge']\"))\n      assert.equal(await addedToCartText.getText(), 1, \"Cart badge should be 1 after removing one product to cart\")",
                  "err": {},
                  "uuid": "6dbd8d1c-5401-44c6-a2f3-888793b158bb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if the specific product is the same after clicking the title",
                  "fullTitle": "Test add to cart functionality Test cart badge increment and decrement Verify if the specific product is the same after clicking the title",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "77bfd973-2c3b-4989-ba1a-a9267e63364e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if add to cart and remove button are working on a specific product and verify the cart badge if incrementing or decrementing",
                  "fullTitle": "Test add to cart functionality Test cart badge increment and decrement Verify if add to cart and remove button are working on a specific product and verify the cart badge if incrementing or decrementing",
                  "timedOut": null,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b9feb46c-e383-4a63-8720-4f7a22c70670",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if the cart is resetting and if the 'Remove' button reverts to 'Add to cart' once the user logs out",
                  "fullTitle": "Test add to cart functionality Test cart badge increment and decrement Verify if the cart is resetting and if the 'Remove' button reverts to 'Add to cart' once the user logs out",
                  "timedOut": null,
                  "duration": 1151,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await verifyUrl(\"https://www.saucedemo.com/inventory.html\") // Note, feel free to change to test assertion\n// Re-add to cart the removed product\nawait driver.wait(until.elementLocated(By.id(\"add-to-cart-sauce-labs-bolt-t-shirt\")), 2000)\nlet firstAddToCart = await driver.findElement(By.id(\"add-to-cart-sauce-labs-bolt-t-shirt\"))  //button[@id='add-to-cart-sauce-labs-bolt-t-shirt' and @name='add-to-cart-sauce-labs-bolt-t-shirt']\nawait firstAddToCart.click()\n// Click the burger menu to click the link\nawait driver.findElement(By.id(\"react-burger-menu-btn\")).click()\n// Wait for the link to show up\nlet menuWrapElement = await driver.wait(until.elementLocated(By.className(\"bm-menu-wrap\")), 5000);\nawait driver.wait(until.elementIsVisible(menuWrapElement), 5000)\n// Get the value of the aria-hidden attribute\nlet ariaHiddenValue = await menuWrapElement.getAttribute(\"aria-hidden\");\nif(ariaHiddenValue != \"true\"){\n  // Click logout link\n  await driver.wait(until.elementLocated(By.id(\"logout_sidebar_link\")), 2000)\n  let logoutLink = await driver.findElement(By.id(\"logout_sidebar_link\"))\n  await logoutLink.click()\n  // Assert if logout successfully, should redirect to login page\n  await verifyUrl(\"https://www.saucedemo.com/\") // Note, feel free to change to test assertion\n}\nelse{\n  console.log(\"Ooops. Sidebar is hidden.\")\n}\n// Relogin the standard_user\nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\nawait driver.findElement(By.id(\"login-button\")).click();\nawait driver.wait(until.urlIs(\"https://www.saucedemo.com/inventory.html\"), 10000); // Wait until redirected to inventory page\nawait verifyUrl(\"https://www.saucedemo.com/inventory.html\") // Note, feel free to change to test assertion\n// Check two products remove button\nawait driver.wait(until.elementLocated(By.id(\"remove-test.allthethings()-t-shirt-(red)\")), 2000)\nawait driver.wait(until.elementLocated(By.id(\"remove-sauce-labs-bolt-t-shirt\")), 2000)\nlet firstProduct = await driver.findElement(By.id(\"remove-test.allthethings()-t-shirt-(red)\"))\nlet secondProduct = await driver.findElement(By.id(\"remove-sauce-labs-bolt-t-shirt\"))\n// Assert the button text if Remove\nassert.strictEqual(await firstProduct.getText(), \"Remove\")\nassert.strictEqual(await secondProduct.getText(), \"Remove\")\n// Wait for the add to cart increment value\nlet totalOfAddedToCart = await driver.wait(until.elementLocated(By.xpath(\"//span[@data-test='shopping-cart-badge']\")), 5000)\nawait driver.wait(until.elementIsVisible(totalOfAddedToCart), 5000)\n// Get the total, in this case this should be two (2)\nlet addedToCartText = await driver.findElement(By.xpath(\"//span[@data-test='shopping-cart-badge']\"))\nassert.equal(await addedToCartText.getText(), 2, \"Cart badge should be 2\")",
                  "err": {},
                  "uuid": "f78c5971-3f85-4b5a-8539-90e84e08c193",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c28e0131-97c7-4c86-b3d2-9037ab4578d9",
                "6dbd8d1c-5401-44c6-a2f3-888793b158bb",
                "77bfd973-2c3b-4989-ba1a-a9267e63364e",
                "b9feb46c-e383-4a63-8720-4f7a22c70670",
                "f78c5971-3f85-4b5a-8539-90e84e08c193"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2269,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "63981a32-3bb0-45b9-ab42-946d58d4e948",
          "title": "Test the sorting functionalities",
          "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabSort.js",
          "file": "\\test\\swaglabs\\scripts\\testSwagLabSort.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test the sorting functionalities\"",
              "fullTitle": "Test the sorting functionalities \"before all\" hook in \"Test the sorting functionalities\"",
              "timedOut": null,
              "duration": 4959,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await new Builder().forBrowser(\"MicrosoftEdge\").build();\nawait driver.get(\"https://www.saucedemo.com/\");",
              "err": {},
              "uuid": "b9afb99c-d4d9-4224-9653-c5b7af40d467",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Test the sorting functionalities\"",
              "fullTitle": "Test the sorting functionalities \"after all\" hook in \"Test the sorting functionalities\"",
              "timedOut": null,
              "duration": 1296,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "0699eaaa-4cb7-476b-b16c-e45f62e827e2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "022a1ceb-ff43-4793-bef5-94da7cd99a34",
              "title": "Test login with correct credentials to redirect on inventory page",
              "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabSort.js",
              "file": "\\test\\swaglabs\\scripts\\testSwagLabSort.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Verify if user is able to login using correct username and password",
                  "fullTitle": "Test the sorting functionalities Test login with correct credentials to redirect on inventory page Verify if user is able to login using correct username and password",
                  "timedOut": null,
                  "duration": 1400,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n      await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n      await driver.findElement(By.id(\"login-button\")).click();\n      await driver.wait(until.urlIs(\"https://www.saucedemo.com/inventory.html\"), 10000); // Wait until redirected to inventory page\n      await verifyUrl(\"https://www.saucedemo.com/inventory.html\") // Note, feel free to change to test assertion",
                  "err": {},
                  "uuid": "4741998c-6b1c-4557-a30c-b243e315f5fc",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4741998c-6b1c-4557-a30c-b243e315f5fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1400,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "97495021-cafe-46e4-9d4f-d19ca87466fd",
              "title": "Test each sort products",
              "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabSort.js",
              "file": "\\test\\swaglabs\\scripts\\testSwagLabSort.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Verify if sorting by Name (Z to A) will sort the products in reverse alphabetical order",
                  "fullTitle": "Test the sorting functionalities Test each sort products Verify if sorting by Name (Z to A) will sort the products in reverse alphabetical order",
                  "timedOut": null,
                  "duration": 460,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Now you are guaranteed to be on the inventory page due to the beforeEach hook\n// Set an implicit wait timeout\nawait driver.manage().setTimeouts({ implicit: 500 });\nawait verifyUrl(\"https://www.saucedemo.com/inventory.html\") // Note, feel free to change to test assertion\nawait verifyTitle(\"Swag Labs\") // Note, feel free to change to test assertion\n// Locate the sort dropdown\nlet sortDropdown = await driver.wait(until.elementLocated(By.className(\"product_sort_container\")), 5000)\nawait driver.wait(until.elementIsVisible(sortDropdown), 5000)\n// Create a select instance\nlet selectSort = new Select(sortDropdown)\nawait selectSort.selectByVisibleText(\"Name (Z to A)\")\n// Verify the products are sorted in reverse alphabetical order\n// Fetch all product names\nlet productElements = await driver.findElements(By.className(\"inventory_item_name\"))\nlet productNames = []\nfor (let productElement of productElements) {\n  productNames.push(await productElement.getText())\n}\n// Copy the array and sort it for comparison\nlet sortedProductNames = [...productNames].sort().reverse()\nassert.deepEqual(productNames, sortedProductNames)",
                  "err": {},
                  "uuid": "8dae738b-135c-48c3-a6e4-80b96714e47a",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if sorting by Name (A to Z) will sort the products in alphabetical order",
                  "fullTitle": "Test the sorting functionalities Test each sort products Verify if sorting by Name (A to Z) will sort the products in alphabetical order",
                  "timedOut": null,
                  "duration": 220,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Now you are guaranteed to be on the inventory page due to the beforeEach hook\n// Set an implicit wait timeout\nawait driver.manage().setTimeouts({ implicit: 500 });\nawait verifyUrl(\"https://www.saucedemo.com/inventory.html\") // Note, feel free to change to test assertion\n// Locate the sort dropdown\nlet sortDropdown = await driver.wait(until.elementLocated(By.className(\"product_sort_container\")), 5000)\nawait driver.wait(until.elementIsVisible(sortDropdown), 5000)\n// Create a select instance\nlet selectSort = new Select(sortDropdown)\nawait selectSort.selectByVisibleText(\"Name (A to Z)\")\n// Verify the products are sorted in alphabetical order\n// Fetch all product names\nlet productElements = await driver.findElements(By.className(\"inventory_item_name\"))\nlet productNames = []\nfor (let productElement of productElements) {\n  productNames.push(await productElement.getText())\n}\n// Copy the array and sort it for comparison\nlet sortedProductNames = [...productNames].sort()\nassert.deepEqual(productNames, sortedProductNames)",
                  "err": {},
                  "uuid": "09bef0fc-d4e5-4160-a309-efd793195bda",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if sorting by Price (low to high) will sort the products from lower to higher order",
                  "fullTitle": "Test the sorting functionalities Test each sort products Verify if sorting by Price (low to high) will sort the products from lower to higher order",
                  "timedOut": null,
                  "duration": 588,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Now you are guaranteed to be on the inventory page due to the beforeEach hook\n// Set an implicit wait timeout\nawait driver.manage().setTimeouts({ implicit: 500 });\nawait verifyUrl(\"https://www.saucedemo.com/inventory.html\") // Note, feel free to change to test assertion\n// Locate the sort dropdown\nlet sortDropdown = await driver.wait(until.elementLocated(By.className(\"product_sort_container\")), 5000)\nawait driver.wait(until.elementIsVisible(sortDropdown), 5000)\n// Create a select instance\nlet selectSort = new Select(sortDropdown)\nawait selectSort.selectByVisibleText(\"Price (low to high)\")\n// Verify the products are sorted in low to high order\n// Fetch all product names\nlet productElements = await driver.findElements(By.className(\"inventory_item_name\"))\nlet productNames = []\nfor (let productElement of productElements) {\n  productNames.push(await productElement.getText())\n}\n// Copy the array and sort it for comparison\nlet sortedProductNames = [...productNames]\nassert.deepEqual(productNames, sortedProductNames)",
                  "err": {},
                  "uuid": "c798943b-de77-42bb-bef6-b843295dd48b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if sorting by Price (high to low) will sort the products from higher to lower order",
                  "fullTitle": "Test the sorting functionalities Test each sort products Verify if sorting by Price (high to low) will sort the products from higher to lower order",
                  "timedOut": null,
                  "duration": 239,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Now you are guaranteed to be on the inventory page due to the beforeEach hook\n// Set an implicit wait timeout\nawait driver.manage().setTimeouts({ implicit: 500 });\nawait verifyUrl(\"https://www.saucedemo.com/inventory.html\") // Note, feel free to change to test assertion\n// Locate the sort dropdown\nlet sortDropdown = await driver.wait(until.elementLocated(By.className(\"product_sort_container\")), 5000)\nawait driver.wait(until.elementIsVisible(sortDropdown), 5000)\n// Create a select instance\nlet selectSort = new Select(sortDropdown)\nawait selectSort.selectByVisibleText(\"Price (high to low)\")\n// Verify the products are sorted in low to high order\n// Fetch all product names\nlet productElements = await driver.findElements(By.className(\"inventory_item_name\"))\nlet productNames = []\nfor (let productElement of productElements) {\n  productNames.push(await productElement.getText())\n}\n// Copy the array and sort it for comparison\nlet sortedProductNames = [...productNames]\nassert.deepEqual(productNames, sortedProductNames)",
                  "err": {},
                  "uuid": "9f14c225-8653-4c19-ba1d-f60b1e9d3c61",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8dae738b-135c-48c3-a6e4-80b96714e47a",
                "09bef0fc-d4e5-4160-a309-efd793195bda",
                "c798943b-de77-42bb-bef6-b843295dd48b",
                "9f14c225-8653-4c19-ba1d-f60b1e9d3c61"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1507,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "d80004cb-e91c-48af-a76e-dd3366496b28",
          "title": "Verify login functionalities of Swag Labs",
          "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabLogin.js",
          "file": "\\test\\swaglabs\\scripts\\testSwagLabLogin.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Verify login functionalities of Swag Labs\"",
              "fullTitle": "Verify login functionalities of Swag Labs \"before all\" hook in \"Verify login functionalities of Swag Labs\"",
              "timedOut": null,
              "duration": 4953,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await new Builder().forBrowser(\"MicrosoftEdge\").build()\nawait driver.get(\"https://www.saucedemo.com/\")",
              "err": {},
              "uuid": "366da6d0-3ebd-408a-a1b0-63ce26ed335f",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Verify login functionalities of Swag Labs\"",
              "fullTitle": "Verify login functionalities of Swag Labs \"after all\" hook in \"Verify login functionalities of Swag Labs\"",
              "timedOut": null,
              "duration": 243,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit()",
              "err": {},
              "uuid": "07fb0946-9519-4723-a996-094f106d31db",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "96b7137c-fe95-46c6-908c-13a0a82d98b4",
              "title": "Test the login with incorrect credentials",
              "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabLogin.js",
              "file": "\\test\\swaglabs\\scripts\\testSwagLabLogin.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Verify if user is unable to login using incorrect username and password",
                  "fullTitle": "Verify login functionalities of Swag Labs Test the login with incorrect credentials Verify if user is unable to login using incorrect username and password",
                  "timedOut": null,
                  "duration": 2022,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Clear the username and password inputs for next it block\nawait clearInput(\"user-name\")\nawait clearInput(\"password\")\nawait login(\"strandard_users\", \"sentret_sows\")\n// Epic sadface: Username and password do not match any user in this service\nlet validationMessage = await driver.findElement(By.xpath(\"//h3[@data-test='error']\")).getText()\nassert.strictEqual(validationMessage, \"Epic sadface: Username and password do not match any user in this service\")",
                  "err": {},
                  "uuid": "9b9edf72-cba6-417a-a086-063445999d17",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if user is unable to login using incorrect username but correct password",
                  "fullTitle": "Verify login functionalities of Swag Labs Test the login with incorrect credentials Verify if user is unable to login using incorrect username but correct password",
                  "timedOut": null,
                  "duration": 906,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Clear the username and password inputs for next it block\nawait clearInput(\"user-name\")\nawait clearInput(\"password\")\nawait login(\"strandard_users\", \"secret_sauce\")\nlet validationMessage = await driver.findElement(By.xpath(\"//h3[@data-test='error']\")).getText()\nassert.strictEqual(validationMessage, \"Epic sadface: Username and password do not match any user in this service\")",
                  "err": {},
                  "uuid": "fe6f4c63-f06f-41af-abf3-252d6f77cee0",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if user is unable to login using incorrect password but correct username",
                  "fullTitle": "Verify login functionalities of Swag Labs Test the login with incorrect credentials Verify if user is unable to login using incorrect password but correct username",
                  "timedOut": null,
                  "duration": 698,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Clear the username and password inputs for next it block\nawait clearInput(\"user-name\")\nawait clearInput(\"password\")\nawait login(\"standard_user\", \"sentret_sows\")\nlet validationMessage = await driver.findElement(By.xpath(\"//h3[@data-test='error']\")).getText()\nassert.strictEqual(validationMessage, \"Epic sadface: Username and password do not match any user in this service\")",
                  "err": {},
                  "uuid": "e0929213-58b7-4919-9766-1774c46c7ac4",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if user is unable to login with empty credentials such as username and password",
                  "fullTitle": "Verify login functionalities of Swag Labs Test the login with incorrect credentials Verify if user is unable to login with empty credentials such as username and password",
                  "timedOut": null,
                  "duration": 678,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await driver.findElement(By.className(\"error-button\")).click()\n      // Clear the username and password inputs for next it block\n      await clearInput(\"user-name\")\n      await clearInput(\"password\")\n      await driver.findElement(By.id(\"login-button\")).click()\n      let validationMessage = await driver.wait(until.elementLocated(By.xpath(\"//h3[@data-test='error']\")))\n      assert.strictEqual(await validationMessage.getText(), \"Epic sadface: Username is required\")",
                  "err": {},
                  "uuid": "90344280-18f2-4611-9a98-adbd53a5e341",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if user is unable to login with empty password input",
                  "fullTitle": "Verify login functionalities of Swag Labs Test the login with incorrect credentials Verify if user is unable to login with empty password input",
                  "timedOut": null,
                  "duration": 309,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await driver.findElement(By.className(\"error-button\")).click()\n      // fill in username\n      await loginUserName(\"standard_user\")\n      let validationMessage = await driver.wait(until.elementLocated(By.xpath(\"//h3[@data-test='error']\")))\n      assert.strictEqual(await validationMessage.getText(), \"Epic sadface: Password is required\")",
                  "err": {},
                  "uuid": "4c33c297-6458-44c3-957b-63413a792562",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if locked_out_user is unable to login",
                  "fullTitle": "Verify login functionalities of Swag Labs Test the login with incorrect credentials Verify if locked_out_user is unable to login",
                  "timedOut": null,
                  "duration": 471,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Close the validation error message\n      await driver.findElement(By.className(\"error-button\")).click()\n      await clearInput(\"user-name\")\n      await clearInput(\"password\")\n      await login(\"locked_out_user\", \"secret_sauce\")\n      let validationMessage = await driver.findElement(By.xpath(\"//h3[@data-test='error']\")).getText()\n      assert.strictEqual(validationMessage, \"Epic sadface: Sorry, this user has been locked out.\")\n      // Assert url\n      await verifyUrl(\"https://www.saucedemo.com/\")",
                  "err": {},
                  "uuid": "e7a24936-0651-4b33-8c31-30d2ab18515e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if user is unable to login with empty username input",
                  "fullTitle": "Verify login functionalities of Swag Labs Test the login with incorrect credentials Verify if user is unable to login with empty username input",
                  "timedOut": null,
                  "duration": 333,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Close the validation error message\n      await driver.findElement(By.className(\"error-button\")).click()\n      // Clear the username input for next it block\n      await clearInput(\"user-name\")\n      await clearInput(\"password\")\n      // Fill in password\n      await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\")\n      await driver.findElement(By.id(\"login-button\")).click()\n      let validationMessage = await driver.wait(until.elementLocated(By.xpath(\"//h3[@data-test='error']\")))\n      assert.strictEqual(await validationMessage.getText(), \"Epic sadface: Username is required\")",
                  "err": {},
                  "uuid": "9101d677-4938-4a55-ab4f-576b31298ba9",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b9edf72-cba6-417a-a086-063445999d17",
                "fe6f4c63-f06f-41af-abf3-252d6f77cee0",
                "e0929213-58b7-4919-9766-1774c46c7ac4",
                "90344280-18f2-4611-9a98-adbd53a5e341",
                "4c33c297-6458-44c3-957b-63413a792562",
                "e7a24936-0651-4b33-8c31-30d2ab18515e",
                "9101d677-4938-4a55-ab4f-576b31298ba9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5417,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "1ef283e4-fc25-44fd-be52-1cdfa8d8b59e",
              "title": "Test the login with correct credentials",
              "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabLogin.js",
              "file": "\\test\\swaglabs\\scripts\\testSwagLabLogin.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Verify if user is able to login using correct username and password",
                  "fullTitle": "Verify login functionalities of Swag Labs Test the login with correct credentials Verify if user is able to login using correct username and password",
                  "timedOut": null,
                  "duration": 396,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Close the validation error message\nawait driver.findElement(By.className(\"error-button\")).click()\nawait clearInput(\"password\")\nawait login(\"standard_user\", \"secret_sauce\")\nawait driver.wait(until.urlIs(\"https://www.saucedemo.com/inventory.html\"), 10000);\nawait verifyUrl(\"https://www.saucedemo.com/inventory.html\") // assert url",
                  "err": {},
                  "uuid": "7bcee7e2-b0bd-421b-a531-f0b30c86bc42",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7bcee7e2-b0bd-421b-a531-f0b30c86bc42"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 396,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "4821bf8c-b798-4c42-88ee-ee8960ead4c6",
          "title": "Verify checkout procedures of swag labs e-commerce",
          "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabCheckout.js",
          "file": "\\test\\swaglabs\\scripts\\testSwagLabCheckout.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Verify checkout procedures of swag labs e-commerce\"",
              "fullTitle": "Verify checkout procedures of swag labs e-commerce \"before all\" hook in \"Verify checkout procedures of swag labs e-commerce\"",
              "timedOut": null,
              "duration": 5679,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await new Builder().forBrowser(\"MicrosoftEdge\").build();\nawait driver.get(\"https://www.saucedemo.com/\");",
              "err": {},
              "uuid": "c338cb74-8db5-4e00-8335-f5921a0a250a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Verify checkout procedures of swag labs e-commerce\"",
              "fullTitle": "Verify checkout procedures of swag labs e-commerce \"after all\" hook in \"Verify checkout procedures of swag labs e-commerce\"",
              "timedOut": null,
              "duration": 66,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "082145c1-60f6-496d-bd68-a02acb40167e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c2640552-2efc-4a57-b9c5-468d569fa854",
              "title": "Test login with correct credentials to redirect on inventory page",
              "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabCheckout.js",
              "file": "\\test\\swaglabs\\scripts\\testSwagLabCheckout.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Verify if user is able to login using correct username and password",
                  "fullTitle": "Verify checkout procedures of swag labs e-commerce Test login with correct credentials to redirect on inventory page Verify if user is able to login using correct username and password",
                  "timedOut": null,
                  "duration": 1141,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await login(\"standard_user\", \"secret_sauce\")\nawait driver.wait(until.urlIs(\"https://www.saucedemo.com/inventory.html\"), 10000); // Wait until redirected to inventory page\n// Assert url\nawait verifyUrl(\"https://www.saucedemo.com/inventory.html\")",
                  "err": {},
                  "uuid": "c78ffdfa-92dd-45b7-97bb-689228175e62",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c78ffdfa-92dd-45b7-97bb-689228175e62"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1141,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "8d75dc6b-dbd0-44fc-bb03-575ac044cef7",
              "title": "Verify if user is able to checkout product",
              "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabCheckout.js",
              "file": "\\test\\swaglabs\\scripts\\testSwagLabCheckout.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Verify if user is able to checkout with product/s on its cart",
                  "fullTitle": "Verify checkout procedures of swag labs e-commerce Verify if user is able to checkout product Verify if user is able to checkout with product/s on its cart",
                  "timedOut": null,
                  "duration": 920,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Assertion if on the right page\nawait verifyUrl(\"https://www.saucedemo.com/inventory.html\")\n  \n// Assert the title of the page\nawait verifyTitle(\"Swag Labs\")\n// Add to cart\nawait addToCart(\"add-to-cart-sauce-labs-bolt-t-shirt\")\nawait addToCart(\"add-to-cart-test.allthethings()-t-shirt-(red)\")\nawait addToCart(\"add-to-cart-sauce-labs-onesie\")\n// Assert the cart badge current value\n// Wait for the add to cart increment value\nlet totalOfAddedToCart = await driver.wait(until.elementLocated(By.xpath(\"//span[@data-test='shopping-cart-badge']\")), 5000)\nawait driver.wait(until.elementIsVisible(totalOfAddedToCart), 5000)\n// Get the total, in this case this should be two (2)\nlet addedToCartText = await driver.findElement(By.xpath(\"//span[@data-test='shopping-cart-badge']\"))\nassert.equal(await addedToCartText.getText(), 3, \"Cart badge should be 3\")\n// Click the cart icon\nawait addedToCartText.click()\n// Assert the redirected page - cart page\nawait verifyUrl(\"https://www.saucedemo.com/cart.html\")\n// Assert the title of the current page\nawait verifyCurrentPage(\"Your Cart\")\n// Assert the product/s remove to cart\nawait removeToCart(\"remove-sauce-labs-bolt-t-shirt\") // note, will remove here\nlet currentCartBadge = await driver.findElement(By.className(\"shopping_cart_badge\"))\nassert.deepEqual(await currentCartBadge.getText(), 2, \"Successfully remove the added product\")\nlet storeAddedProduct = []\nconst allInventoryItems = await driver.findElements(By.className(\"inventory_item_name\"))\nfor(let allInventoryItem of allInventoryItems){\n  storeAddedProduct.push(await allInventoryItem.getText())\n}\nstoreAddedProduct.sort()\n// Assert the added product/s\nconst allProducts = [...storeAddedProduct].sort()\nfor(let i = 0; i < allProducts.length; i++){\n  assert.deepEqual(await storeAddedProduct[i], await allProducts[i])\n}\nawait driver.findElement(By.id(\"checkout\")).click()\n// Assert next page - check out step one page\nawait verifyUrl(\"https://www.saucedemo.com/checkout-step-one.html\")",
                  "err": {},
                  "uuid": "bc26d73d-6264-4cd5-b4ea-4d76c0761d0e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if user is unable to continue checking-out product with empty information",
                  "fullTitle": "Verify checkout procedures of swag labs e-commerce Verify if user is able to checkout product Verify if user is unable to continue checking-out product with empty information",
                  "timedOut": null,
                  "duration": 247,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Assert current page\nawait verifyUrl(\"https://www.saucedemo.com/checkout-step-one.html\")\nlet continueButton = await driver.findElement(By.id(\"continue\"))\nawait continueButton.click()\n// await driver.wait(until.elementIsVisible(By.id(\"error-message-container\")), 5000)\nlet locateMessage = await driver.wait(until.elementLocated(By.xpath(\"//h3[@data-test='error']\")), 5000)\nawait driver.wait(until.elementIsVisible(locateMessage), 5000)\nlet errorMessage = await driver.findElement(By.xpath(\"//h3[@data-test='error']\"))\nassert.equal(await errorMessage.getText(), \"Error: First Name is required\")",
                  "err": {},
                  "uuid": "db051a44-bfec-4288-9741-84b94a8dc964",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if user is unable to move forward checking-out product with empty first name but filled-in last name and zip code",
                  "fullTitle": "Verify checkout procedures of swag labs e-commerce Verify if user is able to checkout product Verify if user is unable to move forward checking-out product with empty first name but filled-in last name and zip code",
                  "timedOut": null,
                  "duration": 417,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Fill in last name and zip code but leave the first name empty\nawait lastNameAndZipCode(\"test\", \"1750\")\nlet continueButton = await driver.findElement(By.id(\"continue\"))\nawait continueButton.click()\n// await driver.wait(until.elementIsVisible(By.id(\"error-message-container\")), 5000)\nlet locateMessage = await driver.wait(until.elementLocated(By.xpath(\"//h3[@data-test='error']\")), 5000)\nawait driver.wait(until.elementIsVisible(locateMessage), 5000)\nlet errorMessage = await driver.findElement(By.xpath(\"//h3[@data-test='error']\"))\nassert.equal(await errorMessage.getText(), \"Error: First Name is required\")",
                  "err": {},
                  "uuid": "08ca6ee2-0d74-4295-a1b2-95bc885068f6",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if user is unable to move forward checking-out product with empty first name and last name but filled-in zip code",
                  "fullTitle": "Verify checkout procedures of swag labs e-commerce Verify if user is able to checkout product Verify if user is unable to move forward checking-out product with empty first name and last name but filled-in zip code",
                  "timedOut": null,
                  "duration": 276,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Clear last name\nawait clearInput('last-name')\nlet continueButton = await driver.findElement(By.id(\"continue\"))\nawait continueButton.click()\n// await driver.wait(until.elementIsVisible(By.id(\"error-message-container\")), 5000)\nlet locateMessage = await driver.wait(until.elementLocated(By.xpath(\"//h3[@data-test='error']\")), 5000)\nawait driver.wait(until.elementIsVisible(locateMessage), 5000)\nlet errorMessage = await driver.findElement(By.xpath(\"//h3[@data-test='error']\"))\nassert.equal(await errorMessage.getText(), \"Error: First Name is required\")",
                  "err": {},
                  "uuid": "328f8e90-1e1d-4ede-b291-87bfb10afebb",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if user is unable to move forward checking-out product with empty first name and zip code but filled-in last name",
                  "fullTitle": "Verify checkout procedures of swag labs e-commerce Verify if user is able to checkout product Verify if user is unable to move forward checking-out product with empty first name and zip code but filled-in last name",
                  "timedOut": null,
                  "duration": 425,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Fill in last name but leave the first name and zip code empty\nawait driver.findElement(By.xpath(\"//input[@id='last-name']\")).sendKeys(\"test\")\n// Clear postal\nawait clearInput('postal-code')\nlet continueButton = await driver.findElement(By.id(\"continue\"))\nawait continueButton.click()\n// await driver.wait(until.elementIsVisible(By.id(\"error-message-container\")), 5000)\nlet locateMessage = await driver.wait(until.elementLocated(By.xpath(\"//h3[@data-test='error']\")), 5000)\nawait driver.wait(until.elementIsVisible(locateMessage), 5000)\nlet errorMessage = await driver.findElement(By.xpath(\"//h3[@data-test='error']\"))\nassert.equal(await errorMessage.getText(), \"Error: First Name is required\")",
                  "err": {},
                  "uuid": "84a671cb-eee5-4070-addd-c64942eb1f09",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if user is unable to move forward checking-out product with empty last name but filled-in first name and zip code",
                  "fullTitle": "Verify checkout procedures of swag labs e-commerce Verify if user is able to checkout product Verify if user is unable to move forward checking-out product with empty last name but filled-in first name and zip code",
                  "timedOut": null,
                  "duration": 539,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Fill in first name and zip code but leave the last name empty\nawait firstNameAndZipCode(\"test\", \"17500\")\n// Clear postal\nawait clearInput('last-name')\nlet continueButton = await driver.findElement(By.id(\"continue\"))\nawait continueButton.click()\n// await driver.wait(until.elementIsVisible(By.id(\"error-message-container\")), 5000)\nlet locateMessage = await driver.wait(until.elementLocated(By.xpath(\"//h3[@data-test='error']\")), 5000)\nawait driver.wait(until.elementIsVisible(locateMessage), 5000)\nlet errorMessage = await driver.findElement(By.xpath(\"//h3[@data-test='error']\"))\nassert.equal(await errorMessage.getText(), \"Error: Last Name is required\")",
                  "err": {},
                  "uuid": "c495a51b-f51b-4a24-9e9c-caae82b24e6b",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if user is unable to move forward checking-out product with empty last name and zip code but filled-in first name",
                  "fullTitle": "Verify checkout procedures of swag labs e-commerce Verify if user is able to checkout product Verify if user is unable to move forward checking-out product with empty last name and zip code but filled-in first name",
                  "timedOut": null,
                  "duration": 406,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Clear first name\n      await clearInput('first-name')\n      // Fill in first name but leave the last name and zip code empty\n      await driver.findElement(By.xpath(\"//input[@id='first-name']\")).sendKeys(\"test\")\n      // Clear last name\n      await clearInput('last-name')\n      // Clear postal\n      await clearInput('postal-code')\n      let continueButton = await driver.findElement(By.id(\"continue\"))\n      await continueButton.click()\n      // await driver.wait(until.elementIsVisible(By.id(\"error-message-container\")), 5000)\n      let locateMessage = await driver.wait(until.elementLocated(By.xpath(\"//h3[@data-test='error']\")), 5000)\n      await driver.wait(until.elementIsVisible(locateMessage), 5000)\n      let errorMessage = await driver.findElement(By.xpath(\"//h3[@data-test='error']\"))\n      assert.equal(await errorMessage.getText(), \"Error: Last Name is required\")",
                  "err": {},
                  "uuid": "589b46ba-0e8b-4c74-817f-6bb815e59ffa",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if user is unable to move forward checking-out product with empty zip code but filled-in first name and last name",
                  "fullTitle": "Verify checkout procedures of swag labs e-commerce Verify if user is able to checkout product Verify if user is unable to move forward checking-out product with empty zip code but filled-in first name and last name",
                  "timedOut": null,
                  "duration": 371,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Clear first name\nawait clearInput('first-name')\n// Fill in first name but leave the last name and zip code empty\nawait firstAndLastName(\"test\", \"test\")\n// Clear postal\nawait clearInput('postal-code')\nlet continueButton = await driver.findElement(By.id(\"continue\"))\nawait continueButton.click()\n// await driver.wait(until.elementIsVisible(By.id(\"error-message-container\")), 5000)\nlet locateMessage = await driver.wait(until.elementLocated(By.xpath(\"//h3[@data-test='error']\")), 5000)\nawait driver.wait(until.elementIsVisible(locateMessage), 5000)\nlet errorMessage = await driver.findElement(By.xpath(\"//h3[@data-test='error']\"))\nassert.equal(await errorMessage.getText(), \"Error: Postal Code is required\")",
                  "err": {},
                  "uuid": "9f9b2925-b9bb-4d50-af50-19c096ae8d10",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if user is able to move forward checking-out product with complete information",
                  "fullTitle": "Verify checkout procedures of swag labs e-commerce Verify if user is able to checkout product Verify if user is able to move forward checking-out product with complete information",
                  "timedOut": null,
                  "duration": 949,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Clear inputs\nawait clearInput('first-name')\nawait clearInput('last-name')\nawait clearInput('postal-code')\n// Fill in first name but leave the last name and zip code empty\nawait completeInformation(\"test\", \"test\", \"1750\")\nawait driver.wait(until.elementLocated(By.id(\"continue\")), 5000)\nlet continueButton = await driver.findElement(By.id(\"continue\"))\nawait continueButton.click()\n// Assert the right page - check out step two\nawait verifyUrl(\"https://www.saucedemo.com/checkout-step-two.html\")\nlet storeAddedProduct = []\nlet itemTotal = 0\nlet overallTotal = 0\nconst allInventoryItems = await driver.findElements(By.className(\"inventory_item_name\"))\nfor(let allInventoryItem of allInventoryItems){\n  storeAddedProduct.push(await allInventoryItem.getText())\n}\nstoreAddedProduct.sort()\n// Assert the added product/s name\nconst allProducts = [...storeAddedProduct].sort()\nfor(let i = 0; i < allProducts.length; i++){\n  assert.deepEqual(await storeAddedProduct[i], await allProducts[i])\n}\n// Calculate the item total\nconst allInventoryItemPrices = await driver.findElements(By.className(\"inventory_item_price\"))\nfor(let allInventoryItemPrice of allInventoryItemPrices){\n  let stringPrice = await allInventoryItemPrice.getText()\n  let priceNumber = parseFloat(stringPrice.replace(/[^0-9.]/g, ''));\n  itemTotal += priceNumber\n}\nassert.strictEqual(itemTotal, 23.98)\n// Calculate the item total with tax\nconst summaryTax = await driver.findElement(By.className(\"summary_tax_label\"))\nlet textSummaryTax = await summaryTax.getText()\nlet overallTaxTotal = parseFloat(textSummaryTax.replace(/[^0-9.]/g, ''));\noverallTotal = itemTotal + overallTaxTotal\nassert.strictEqual(itemTotal + overallTaxTotal, overallTotal)\nawait driver.findElement(By.id(\"finish\")).click()\n// Assert the right page - check out complete\nawait verifyUrl(\"https://www.saucedemo.com/checkout-complete.html\")\n// Assert the title of the current page\nlet currentPageTitle = await driver.findElement(By.className(\"title\"))\nassert.deepEqual(await currentPageTitle.getText(), \"Checkout: Complete!\")\nlet successMessage = await driver.findElement(By.className(\"complete-header\"))\nassert.strictEqual(await successMessage.getText(), \"Thank you for your order!\")\n// Back to product e-commerce\nawait driver.findElement(By.id(\"back-to-products\")).click()\nawait verifyUrl(\"https://www.saucedemo.com/inventory.html\")",
                  "err": {},
                  "uuid": "2cf544d1-763a-4e40-94f3-3024102cd8a1",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc26d73d-6264-4cd5-b4ea-4d76c0761d0e",
                "db051a44-bfec-4288-9741-84b94a8dc964",
                "08ca6ee2-0d74-4295-a1b2-95bc885068f6",
                "328f8e90-1e1d-4ede-b291-87bfb10afebb",
                "84a671cb-eee5-4070-addd-c64942eb1f09",
                "c495a51b-f51b-4a24-9e9c-caae82b24e6b",
                "589b46ba-0e8b-4c74-817f-6bb815e59ffa",
                "9f9b2925-b9bb-4d50-af50-19c096ae8d10",
                "2cf544d1-763a-4e40-94f3-3024102cd8a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4550,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "945a1092-366c-4823-b2dc-69e6c4c17305",
          "title": "Test swag lab links",
          "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabLinks.js",
          "file": "\\test\\swaglabs\\scripts\\testSwagLabLinks.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Test swag lab links\"",
              "fullTitle": "Test swag lab links \"before all\" hook in \"Test swag lab links\"",
              "timedOut": null,
              "duration": 2703,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await new Builder().forBrowser(\"MicrosoftEdge\").build();\nawait driver.get(\"https://www.saucedemo.com/\");",
              "err": {},
              "uuid": "791ac5b9-327f-4a4b-b549-c99db87d0d4a",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Test swag lab links\"",
              "fullTitle": "Test swag lab links \"after all\" hook in \"Test swag lab links\"",
              "timedOut": null,
              "duration": 97,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {},
              "uuid": "20e011cc-cc9d-47ac-8060-87e224af7697",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "3585f0e3-3002-4aef-a8a8-4b9bb3c31b74",
              "title": "Test login with correct credentials to redirect on inventory page",
              "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabLinks.js",
              "file": "\\test\\swaglabs\\scripts\\testSwagLabLinks.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Verify if user is able to login using correct username and password",
                  "fullTitle": "Test swag lab links Test login with correct credentials to redirect on inventory page Verify if user is able to login using correct username and password",
                  "timedOut": null,
                  "duration": 4073,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n      await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n      await driver.findElement(By.id(\"login-button\")).click();\n      await driver.wait(until.urlIs(\"https://www.saucedemo.com/inventory.html\"), 10000); // Wait until redirected to inventory page\n      await verifyUrl(\"https://www.saucedemo.com/inventory.html\") // Note, feel free to change to test assertion",
                  "err": {},
                  "uuid": "28ef5fee-2da3-4823-aa4b-01843c85c39d",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28ef5fee-2da3-4823-aa4b-01843c85c39d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4073,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            },
            {
              "uuid": "99b4abad-90f7-422d-a6df-937b0dc460ff",
              "title": "Test swag lab links",
              "fullFile": "D:\\PROGRAMMING_HABIT\\automation-exam\\test\\swaglabs\\scripts\\testSwagLabLinks.js",
              "file": "\\test\\swaglabs\\scripts\\testSwagLabLinks.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Verify if All Items link will provide all items available in the products",
                  "fullTitle": "Test swag lab links Test swag lab links Verify if All Items link will provide all items available in the products",
                  "timedOut": null,
                  "duration": 899,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await verifyUrl(\"https://www.saucedemo.com/inventory.html\") // Note, feel free to change to test assertion\nawait verifyTitle(\"Swag Labs\") // Note, feel free to change to test assertion\n// Locate the cart icon\nlet cartIcon = await driver.wait(until.elementLocated(By.xpath(\"//a[@data-test='shopping-cart-link']\")), 5000)\nawait driver.wait(until.elementIsVisible(cartIcon), 5000)\n// Click the cart icon\nawait driver.findElement(By.xpath(\"//a[@data-test='shopping-cart-link']\")).click()\nawait verifyUrl(\"https://www.saucedemo.com/cart.html\") // Note, feel free to change to test assertion\n// Click the burger menu to click the link\nawait driver.findElement(By.id(\"react-burger-menu-btn\")).click()\n// Wait for the link to show up\nlet menuWrapElement = await driver.wait(until.elementLocated(By.className(\"bm-menu-wrap\")), 5000);\nawait driver.wait(until.elementIsVisible(menuWrapElement), 5000)\n// Get the value of the aria-hidden attribute\nlet ariaHiddenValue = await menuWrapElement.getAttribute(\"aria-hidden\");\n// Navigation link so far\nlet linkArray = ['All Items', 'About', 'Logout', 'Reset App State']\nif(ariaHiddenValue != \"true\"){\n  let navigationList = await driver.findElement(By.className(\"bm-item-list\"))\n  let navigationNames = [] // will store all the links name here for assertion\n  // Find all <a> elements within the <nav> element\n  let anchorElements = await navigationList.findElements(By.className(\"bm-item\"));\n  // Store the link name to navigationNames variable array\n  for(let anchorElement of anchorElements){\n    navigationNames.push(await anchorElement.getText())\n  }\n  // Assert the link texts\n  for(let i = 0; i < navigationNames.length; i++){\n    assert.deepEqual(linkArray[i], navigationNames[i])\n  }\n  await driver.findElement(By.id(\"inventory_sidebar_link\")).click()\n  // Assert if the page will redirect to inventory\n  await verifyUrl(\"https://www.saucedemo.com/inventory.html\") // Note, feel free to change to test assertion\n  // Check also the products sorted to A-Z alphabetically\n  // Fetch all product names\n  let productElements = await driver.findElements(By.className(\"inventory_item_name\"))\n  let productNames = []\n  for (let productElement of productElements) {\n    productNames.push(await productElement.getText())\n  }\n  // Copy the array and sort it for comparison\n  let sortedProductNames = [...productNames].sort()\n  assert.deepEqual(productNames, sortedProductNames)\n}",
                  "err": {},
                  "uuid": "382ac2c1-d709-4f79-a069-d25ff9a42941",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if Reset App State will reset the app state itself or the current form of the app",
                  "fullTitle": "Test swag lab links Test swag lab links Verify if Reset App State will reset the app state itself or the current form of the app",
                  "timedOut": null,
                  "duration": 513,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Add to cart button\n      await driver.findElement(By.id(\"add-to-cart-sauce-labs-backpack\")).click()\n      await driver.findElement(By.id(\"add-to-cart-sauce-labs-bike-light\")).click()\n      // Wait for the add to cart increment value\n      let totalOfAddedToCart = await driver.wait(until.elementLocated(By.xpath(\"//span[@data-test='shopping-cart-badge']\")), 5000)\n      await driver.wait(until.elementIsVisible(totalOfAddedToCart), 5000)\n      // Get the total, in this case this should be two (2)\n      let addedToCartText = await driver.findElement(By.xpath(\"//span[@data-test='shopping-cart-badge']\"))\n      assert.equal(await addedToCartText.getText(), 2, \"Cart badge should be 2\")\n      // Click the burger menu to click the link\n      await driver.findElement(By.id(\"react-burger-menu-btn\")).click()\n      // Wait for the link to show up\n      let menuWrapElement = await driver.wait(until.elementLocated(By.className(\"bm-menu-wrap\")), 10000);\n      await driver.wait(until.elementIsVisible(menuWrapElement), 10000)\n      let ariaHiddenValue = await menuWrapElement.getAttribute(\"aria-hidden\");\n      if(ariaHiddenValue != \"true\"){\n        // Now, click the reset app state and close the sidebar\n        await driver.wait(until.elementLocated(By.id(\"reset_sidebar_link\")), 5000)\n        await driver.wait(until.elementLocated(By.id(\"react-burger-cross-btn\")), 5000)\n        let resetAppState = await driver.findElement(By.id(\"reset_sidebar_link\"))\n        await resetAppState.click()\n      }",
                  "err": {},
                  "uuid": "8b2e3768-0e18-4221-9f1d-cec93ad819e8",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if user is able to log out",
                  "fullTitle": "Test swag lab links Test swag lab links Verify if user is able to log out",
                  "timedOut": null,
                  "duration": 291,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await driver.findElement(By.id(\"logout_sidebar_link\")).click()\n      // Assert if the page will redirect to login\n      await verifyUrl(\"https://www.saucedemo.com/\")",
                  "err": {},
                  "uuid": "53b9ba27-e50c-4e4b-9e91-37740bf269fd",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Verify if about link will redirect to https://saucelabs.com/",
                  "fullTitle": "Test swag lab links Test swag lab links Verify if about link will redirect to https://saucelabs.com/",
                  "timedOut": null,
                  "duration": 4816,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Relog-in user with correct credentials\n      await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n      await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n      await driver.findElement(By.id(\"login-button\")).click();\n      await driver.wait(until.urlIs(\"https://www.saucedemo.com/inventory.html\"), 10000); // Wait until redirected to inventory page\n      await verifyUrl(\"https://www.saucedemo.com/inventory.html\") // Note, feel free to change to test assertion\n      // Click the burger menu to click the link\n      await driver.findElement(By.id(\"react-burger-menu-btn\")).click()\n      // Wait for the link to show up\n      let menuWrapElement = await driver.wait(until.elementLocated(By.className(\"bm-menu-wrap\")), 5000);\n      await driver.wait(until.elementIsVisible(menuWrapElement), 5000)\n      // Get the value of the aria-hidden attribute\n      let ariaHiddenValue = await menuWrapElement.getAttribute(\"aria-hidden\");\n      if(ariaHiddenValue != \"true\"){\n        await driver.wait(until.elementLocated(By.id(\"about_sidebar_link\")), 5000)\n        let aboutPage = await driver.findElement(By.id(\"about_sidebar_link\"))\n        await aboutPage.click()\n        // Assert if the page will redirect to about or saucelabs\n        await verifyUrl(\"https://saucelabs.com/\") // Note, feel free to change to test assertion\n      }",
                  "err": {},
                  "uuid": "46aa66e8-d56e-4248-9aa4-b4ce57218c2e",
                  "parentUUID": null,
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "382ac2c1-d709-4f79-a069-d25ff9a42941",
                "8b2e3768-0e18-4221-9f1d-cec93ad819e8",
                "53b9ba27-e50c-4e4b-9e91-37740bf269fd",
                "46aa66e8-d56e-4248-9aa4-b4ce57218c2e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6519,
              "root": false,
              "rootEmpty": false,
              "_timeout": null
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}